version: 1
plan:
  id: PLAN-2025-10-23
  title: "Sprint: Contracts Loop & Visibility"
  created: 2025-10-23T18:40:00Z
  owner: adam
  tags: [contracts,validation,atlas]

epics:
  - key: contracts
    title: "Contracts Integration"
    tags: [contracts,validation]
    description: "Enforce contracts across stories and expose them in project views."

  - key: visibility
    title: "Project Visibility in Atlas"
    tags: [atlas,docs]
    description: "Append compact project/contract summaries to atlas.md."

stories:
  # 4) Schema Integration â€” strict validation
  - key: story-contracts-schema
    epic: contracts
    title: "Add contracts to story schema and strict validation"
    priority: high
    contracts:
      implements: ["dot.contracts.validate"]
      depends_on: ["dot.validate"]
    acceptance:
      - "Story schema supports `contracts.{implements,depends_on}` arrays"
      - "`dot validate` fails when stories reference unknown contract IDs"
      - "Tests cover valid/invalid cases"
    tasks:
      - key: t-schema
        title: "Extend story.json schema"
        prompt:
          role: builder
          intent: "Add `contracts` block to story schema; document allowed shapes."
          constraints:
            files_allowlist: ["schemas/**", "src/commands/validate.js", "tests/**"]
          acceptance:
            - "Schema allows both arrays; disallows non-strings"
            - "Canonicalize after write"
      - key: t-crosscheck
        title: "Cross-check contract IDs during validate"
        prompt:
          role: builder
          intent: "Load `.project/contracts/functions.yaml`; ensure each referenced ID exists; otherwise error with file path + field + id."
          constraints:
            files_allowlist: ["src/commands/validate.js", ".project/contracts/functions.yaml", "tests/**"]
          acceptance:
            - "Invalid ID produces clear, actionable error"

  # 5) Dynamic Contract Indexing (JSON view)
  - key: story-contracts-index
    epic: contracts
    title: "Generate contracts/index.json from YAML"
    priority: medium
    contracts:
      implements: ["dot.contracts.index"]
      depends_on: ["dot.canonicalize"]
    acceptance:
      - "Write `.project/contracts/index.json` with ids, layers, deps"
      - "Command is idempotent and canonical"
    tasks:
      - key: t-index
        title: "Implement `dot contracts index`"
        prompt:
          role: builder
          intent: "Parse layers.yaml + functions.yaml; write a canonical `.project/contracts/index.json`."
          constraints:
            files_allowlist: ["src/commands/contracts.js", ".project/contracts/**", "tests/**"]
          acceptance:
            - "Sorted keys; RFC3339 timestamp"
            - "Includes dependency adjacency lists"

  # 6) Cross-Validation Tests
  - key: story-contracts-tests
    epic: contracts
    title: "Jest tests for contracts validation and indexing"
    priority: high
    acceptance:
      - "Tests fail on unknown contract ID"
      - "Tests assert index.json contains declared functions"
    tasks:
      - key: t-tests
        title: "Write Jest tests"
        prompt:
          role: builder
          intent: "Add tests for schema, validator cross-check, and contracts index output."
          constraints:
            files_allowlist: ["tests/**", "src/commands/validate.js", "src/commands/contracts.js", ".project/contracts/**"]
          acceptance:
            - "Green tests with native ESM config"

  # 7) Agent Awareness Layer
  - key: story-agents-docs
    epic: contracts
    title: "Document agent use of contracts in AGENTS.md"
    priority: medium
    acceptance:
      - "AGENTS.md includes how Planner/Builder read contracts and stories"
    tasks:
      - key: t-agents
        title: "Update AGENTS.md"
        prompt:
          role: builder
          intent: "Add a section describing how agents use `contracts/index.json` to plan dependencies and choose commands."
          constraints:
            files_allowlist: ["AGENTS.md", ".project/contracts/index.json", "src/commands/contracts.js"]
          acceptance:
            - "Clear roles and I/O expectations"

  # 8) Visual Atlas Integration
  - key: story-atlas-summary
    epic: visibility
    title: "Append project + contracts summary to atlas"
    priority: medium
    contracts:
      depends_on: ["dot.docs.index", "dot.story.index", "dot.contracts.index"]
    acceptance:
      - "atlas.md ends with a 'Project Summary' and 'Contracts Summary' sections"
      - "Build remains deterministic and fast"
    tasks:
      - key: t-atlas
        title: "Render project/contract summaries"
        prompt:
          role: builder
          intent: "Read `.project/index.json` and `.project/contracts/index.json`; append small summaries to the end of atlas.md."
          constraints:
            files_allowlist: ["src/commands/atlas-build.js", ".project/index.json", ".project/contracts/index.json"]
          acceptance:
            - "Shows counts and top contract IDs by layer"